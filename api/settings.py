"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import datetime
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'u*pc@ipsx3g=+1c3m)da9s&+$e_+9a$&o+-@x9ne^%^71qmk%%'

# SECURITY WARNING: don't run with debug turned on in production!
if os.environ.get('DEBUG'):
    DEBUG = True
else:
    DEBUG = False

# 0. 基本配置
ALLOWED_HOSTS = ['*']  # 允许访问的 IP
ROOT_URLCONF = 'api.urls'  # 根目录 URL
WSGI_APPLICATION = 'api.wsgi.application'

# 1. 应用配置（影响 Model）
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'rest_framework',
    # 'mongolog',
    'corsheaders',
    'qcloud',
    'qchat',
]

# 2. 中间件配置
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'api.middlewares.EnhanceMiddleware',
]

# 3. 跨域访问配置
CORS_ORIGIN_ALLOW_ALL = False

CORS_ORIGIN_WHITELIST = (
    'emilia.fun',
    'localhost:8080',
)

# 4. 模板配置
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# 5.日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # True 表示禁用日志
    'loggers': {  # 5.1 总览
        # 'django': {  # django
        #     'handlers': ['console'],  # 选择 handlers
        #     'propagate': True,
        #     'level': 'DEBUG'
        # },
        'django.db.backends': {
            'handlers': ['console'],
            'propagate': False,
            'level': 'DEBUG'
        },
        'api': {  # 项目内的 logger.info
            'handlers': ['console'],    # ['mongolog'],
            'propagate': False,
            'level': 'INFO',
        }
    },
    'handlers': {  # 5.2 处理信息
        # -------------------------------------------------------------------------------
        # 如果出现 pymongo.errors.ServerSelectionTimeoutError: No servers found yet
        # 尝试将 mongolog/handlers.py:139 修改为 MongoClient(self.connection, w=self.w, j=self.j, connect=False)
        # -------------------------------------------------------------------------------
        # 'mongolog': {
        #     # 输出到 MongoDB
        #     'class': 'mongolog.SimpleMongoLogHandler',
        #     'connection': 'mongodb://api:kugui_st@emilia.fun:27017/mongolog',
        #     'collection': 'log_api_debug' if DEBUG else 'log_api',
        #     'level': 'DEBUG',
        # },
        'sql': {
            # 输出到 stderr
            'class': 'logging.StreamHandler',
            # 仅 debug 环境
            'filters': ['debug_environment'],
            'formatter': 'sql',
            'level': 'DEBUG',
        },
        'console': {
            # 输出到 stderr
            'class': 'logging.StreamHandler',
            # 仅 debug 环境
            'filters': ['debug_environment'],
            'formatter': 'verbose',
            'level': 'DEBUG',
        },
    },
    'formatters': {  # 5.3 格式化
        'sql': {  # SQL
            'format': '''[SQL]
            duration: {duration}s
            sql: {sql}
            params: {params}
            ''',
            'style': '{'
        },
        'verbose': {
            'format': '[{name}|{levelname}] - {asctime}\n'
                      '{filename}:{lineno} {message}',
            'style': '{',
        },
    },
    'filters': {  # 5.4 处理控制
        'debug_environment': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'production_environment': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
}

# 6.数据库配置
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'api',
        'USER': 'api',
        'PASSWORD': '1iann',
        'HOST': '172.18.0.101',
        'PORT': 3306,
        'OPTIONS': {
            'charset': 'utf8mb4',
        },
    }
}
if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# 7. 缓存配置
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://172.18.0.100:6379/1",
        'TIMEOUT': 604800,  # 7 days
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # "PASSWORD": "secret"
        }
    }
}

# 8. 邮件配置
EMAIL_USE_SSL = True
EMAIL_HOST = 'smtp.emilia.fun'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'api@emilia.fun'
EMAIL_HOST_PASSWORD = '1iann'
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
# Default Receiver List
EMAIL_RECEIVER = ['lihu@emilia.fun']
# Add mail user
# insert into users(email, password) values \
# ('api@emilia.fun', ENCRYPT('1iann', \
# CONCAT('$6$', SUBSTRING(SHA(RAND()), -16))));


# 9. JWT 配置
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    # disable DRF Browsable Page
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    )
}
if DEBUG:
    REST_FRAMEWORK = {
        # DRF Auth
        'DEFAULT_AUTHENTICATION_CLASSES': (
            'rest_framework_simplejwt.authentication.JWTAuthentication',
        ),
        'DEFAULT_PERMISSION_CLASSES': (
            'rest_framework.permissions.IsAuthenticated',
        ),
    }

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': True,
    # 'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

# 10. Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 11. I18N 配置
# https://docs.djangoproject.com/en/2.2/topics/i18n/
LANGUAGE_CODE = 'en-US'
# LANGUAGE_CODE = 'zh-cn'
TIME_ZONE = 'Asia/Shanghai'
# TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# 12. Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_URL = '/static/'
